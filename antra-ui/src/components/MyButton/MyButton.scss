@use "../../scss/variable";

.btn{
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  border-radius: 4px;
}

$color-map: (
  primary:(
    default:variable.$primary-color,
    hover:#303F9F,
    disabled:rgba(0, 0, 0, 0.12)
  ),
  secondary:(
    default:variable.$secondary-color,
    hover:#C51162,
    disabled:rgba(0, 0, 0, 0.12)
  ),
  default:(
    default:variable.$default-color,
    hover:#D5D5D5,
    disabled:rgba(0, 0, 0, 0.12)
  )
);

@mixin color-variant-class($color, $variant){
  .btn-#{$color}-#{$variant}{
    @if $variant == "contained"{
      color:white;
      background-color: map-get(map-get($color-map,$color),"default");
      border:none;
      filter:drop-shadow(0px 3px 1px rgba(0, 0, 0, 0.2)) drop-shadow(0px 2px 2px rgba(0, 0, 0, 0.14)) drop-shadow(0px 1px 5px rgba(0, 0, 0, 0.12));
    }@else if $variant == "outlined"{
      background: none;
      color:map-get(map-get($color-map,$color),"default");
      border:1px solid rgba(map-get(map-get($color-map,$color),"default"), 0.5);
    }@else{
      border:none;
      background: none;
      color: map-get(map-get($color-map,$color),"default");
    }
  }
}

$colors:("primary","secondary","default");
$variants: ("contained", "outlined","text");

@mixin generate-color-variant-classes{
  @each $variant in $variants{
    @each $color in $colors{
      @include color-variant-class($color,$variant );
    }
  }
}

@include generate-color-variant-classes()

